#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char username[50];
    int day, month, year;
    char type[30];
} Schedule;

#define MAX_SCHEDULES 100  // Maximum number of schedules
Schedule schedules[MAX_SCHEDULES];
int scheduleCount = 0;

void addSchedule(const char *username);
void viewSchedule(const char *username, int todayDay, int todayMonth, int todayYear);
void clearPastSchedules(const char *username, int todayDay, int todayMonth, int todayYear);
void saveSchedule();
void loadSchedule();
int pastDate(int d1, int m1, int y1, int d2, int m2, int y2);

void scheduleMenu(const char *currentUser, int todayDay, int todayMonth, int todayYear) {
    int choice;
    do {
        printf("\n=== Schedule Menu ===\n");
        printf("1. View Schedule\n");
        printf("2. Add Schedule\n");
        printf("3. Clear Past Schedule Entries\n");
        printf("4. Back to Main Menu\n");
        printf("Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                viewSchedule(currentUser, todayDay, todayMonth, todayYear);
                break;
            case 2:
                addSchedule(currentUser);
                break;
            case 3:
                clearPastSchedules(currentUser, todayDay, todayMonth, todayYear);
                break;
            case 4:
                printf("Returning to Main Menu...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 4);
}

void addSchedule(const char *username) {
    if (scheduleCount >= MAX_SCHEDULES) {
        printf("Schedule is full!\n");
        return;
    }

    Schedule newSchedule;
    strcpy(newSchedule.username, username);

    printf("Enter the date of schedule (DD MM YYYY): ");
    scanf("%d %d %d", &newSchedule.day, &newSchedule.month, &newSchedule.year);

    printf("Select a workout type:\n");
    printf("1. Cardio\n");
    printf("2. Leg Day\n");
    printf("3. Push Day\n");
    printf("4. Pull Day\n");
    printf("5. Rest Day\n");

    int type;
    do {
        printf("Choice: ");
        scanf("%d", &type);
    } while (type < 1 || type > 5);

    switch (type) {
        case 1:
            strcpy(newSchedule.type, "Cardio");
            break;
        case 2:
            strcpy(newSchedule.type, "Leg Day");
            break;
        case 3:
            strcpy(newSchedule.type, "Push Day");
            break;
        case 4:
            strcpy(newSchedule.type, "Pull Day");
            break;
        case 5:
            strcpy(newSchedule.type, "Rest Day");
            break;
    }

    schedules[scheduleCount++] = newSchedule;
    saveSchedule();

    printf("Schedule added successfully!\n");
}

void viewSchedule(const char *username, int todayDay, int todayMonth, int todayYear) {
    printf("\n==== Your Schedule ====\n");
    int dataFound = 0;
    
    for (int i = 0; i < scheduleCount; i++) {
        if (strcmp(schedules[i].username, username) == 0) {
            printf("%02d-%02d-%04d : %s", schedules[i].day, schedules[i].month, schedules[i].year, schedules[i].type);
            
            if (schedules[i].day == todayDay && schedules[i].month == todayMonth && schedules[i].year == todayYear) {
                printf(" (today)");
            }
            printf("\n");
            dataFound = 1;
        }
    }
    
    if (!dataFound) {
        printf("No schedule found.\n");
    }

    printf("=======================\n");
}

void clearPastSchedules(const char *username, int todayDay, int todayMonth, int todayYear) {
    int writeIndex = 0;
    for (int i = 0; i < scheduleCount; i++) {
        if (strcmp(schedules[i].username, username) == 0) {
            if (!pastDate(schedules[i].day, schedules[i].month, schedules[i].year,
                          todayDay, todayMonth, todayYear)) {
                schedules[writeIndex++] = schedules[i];
            }
        } else {
            schedules[writeIndex++] = schedules[i];
        }
    }
    scheduleCount = writeIndex;
    
    saveSchedule();
    printf("Past schedule entries cleared!\n");
}

void saveSchedule() {
    FILE *fout = fopen("schedules.txt", "w");
    for (int i = 0; i < scheduleCount; i++) {
        fprintf(fout, "%s#%d#%d#%d#%s\n", schedules[i].username, schedules[i].day, schedules[i].month, schedules[i].year, schedules[i].type);
    }
    fclose(fout);
}

void loadSchedule() {
    FILE *fout = fopen("schedules.txt", "r");
    if (!fout) return;

    scheduleCount = 0;
    while (fscanf(fout, "%[^#]#%d#%d#%d#%[^\n]\n", schedules[scheduleCount].username,&schedules[scheduleCount].day,&schedules[scheduleCount].month,&schedules[scheduleCount].year, schedules[scheduleCount].type) == 5) {
        scheduleCount++;
        if (scheduleCount >= MAX_SCHEDULES) break;
    }
    fclose(fout);
}

int pastDate(int d1, int m1, int y1, int d2, int m2, int y2) {
    if (y1 < y2) return 1;
    if (y1 == y2 && m1 < m2) return 1;
    if (y1 == y2 && m1 == m2 && d1 < d2) return 1;
    return 0;
}

int main() {
    char currentUser[50];
    int todayDay, todayMonth, todayYear;

    printf("Enter your username: ");
    scanf("%49s", currentUser);

    printf("Enter today's date (DD MM YYYY): ");
    scanf("%d %d %d", &todayDay, &todayMonth, &todayYear);

    loadSchedule();

    int opt;
    do {
        printf("\n===== Main Fitness Menu =====\n");
        printf("1. Book Instructor\n");
        printf("2. Open Schedule Module\n");
        printf("3. Exit\n");
        printf("Choose: ");

        if (scanf("%d", &opt) != 1) {
            while (getchar() != '\n');
            opt = 0;
        }

        switch (opt) {
            case 1:
                viewSchedule(currentUser, todayDay, todayMonth, todayYear);
                break;
            case 2:
                scheduleMenu(currentUser, todayDay, todayMonth, todayYear);
                break;
            case 3:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid option.\n");
        }
    } while (opt != 3);

    return 0;
}
